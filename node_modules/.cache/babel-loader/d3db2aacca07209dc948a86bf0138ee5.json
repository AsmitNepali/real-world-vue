{"ast":null,"code":"import NProgress from 'nprogress';\nimport { mapState } from 'vuex';\nimport BaseInput from '@/components/BaseInput.vue';\nimport BaseSelect from '@/components/BaseSelect.vue';\nimport BaseButton from '@/components/BaseButton.vue';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, email } from '@vuelidate/validators';\nexport default {\n  setup: () => ({\n    v$: useVuelidate\n  }),\n\n  data() {\n    const times = [];\n\n    for (let i = 1; i <= 24; i++) {\n      times.push(i + \":00\");\n    }\n\n    return {\n      times,\n      event: this.createFreshEventObject()\n    };\n  },\n\n  validations() {\n    return {\n      event: {\n        category: {\n          required\n        },\n        title: {\n          required\n        },\n        description: {\n          required\n        },\n        location: {\n          required\n        },\n        date: {\n          required\n        },\n        time: {\n          required\n        }\n      }\n    };\n  },\n\n  methods: {\n    createEvent() {\n      NProgress.start();\n      this.$store.dispatch(\"event/createEvent\", this.event).then(() => {\n        this.$router.push({\n          name: \"event-show\",\n          params: {\n            id: this.event.id\n          }\n        });\n        this.event = this.createFreshEventObject();\n      }).catch(() => {\n        NProgress.done();\n      });\n    },\n\n    createFreshEventObject() {\n      const user = this.$store.state.user.user;\n      const id = Math.floor(Math.random() * 10000000);\n      return {\n        id: id,\n        user: this.$store.state.user,\n        category: \"\",\n        organizer: user,\n        title: \"\",\n        description: \"\",\n        location: \"\",\n        date: \"\",\n        time: \"\",\n        attendees: []\n      };\n    }\n\n  },\n  computed: { ...mapState([\"categories\"])\n  },\n  components: {\n    BaseInput,\n    BaseSelect,\n    BaseButton\n  }\n};","map":{"version":3,"mappings":"AAoCA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,uBAAhC;AAEA,eAAe;EACbC,KAAK,EAAC,OAAM;IAAEC,EAAE,EAAEJ;EAAN,CAAN,CADO;;EAEbK,IAAI,GAAG;IACH,MAAMC,KAAI,GAAI,EAAd;;IACA,KAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAK,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;MAC1BD,KAAK,CAACE,IAAN,CAAWD,IAAI,KAAf;IACJ;;IACA,OAAO;MACHD,KADG;MAEHG,KAAK,EAAE,KAAKC,sBAAL;IAFJ,CAAP;EAIH,CAXY;;EAYbC,WAAW,GAAG;IACZ,OAAM;MACJF,KAAK,EAAE;QACLG,QAAQ,EAAE;UAACX;QAAD,CADL;QAELY,KAAK,EAAE;UAACZ;QAAD,CAFF;QAGLa,WAAW,EAAE;UAACb;QAAD,CAHR;QAILc,QAAQ,EAAE;UAACd;QAAD,CAJL;QAKLe,IAAI,EAAE;UAACf;QAAD,CALD;QAMLgB,IAAI,EAAE;UAAChB;QAAD;MAND;IADH,CAAN;EAWD,CAxBY;;EAyBbiB,OAAO,EAAE;IACLC,WAAW,GAAG;MACVxB,SAAS,CAACyB,KAAV;MACA,KAAKC,MAAL,CAAYC,QAAZ,CAAqB,mBAArB,EAA0C,KAAKb,KAA/C,EAAsDc,IAAtD,CAA2D,MAAM;QAC7D,KAAKC,OAAL,CAAahB,IAAb,CAAkB;UACdiB,IAAI,EAAE,YADQ;UAEdC,MAAM,EAAE;YAAEC,EAAE,EAAE,KAAKlB,KAAL,CAAWkB;UAAjB;QAFM,CAAlB;QAIA,KAAKlB,KAAL,GAAa,KAAKC,sBAAL,EAAb;MACH,CAND,EAMGkB,KANH,CAMS,MAAM;QACXjC,SAAS,CAACkC,IAAV;MACH,CARD;IASH,CAZI;;IAaLnB,sBAAsB,GAAG;MACrB,MAAMoB,IAAG,GAAI,KAAKT,MAAL,CAAYU,KAAZ,CAAkBD,IAAlB,CAAuBA,IAApC;MACA,MAAMH,EAAC,GAAIK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,CAAX;MACA,OAAO;QACHP,EAAE,EAAEA,EADD;QAEHG,IAAI,EAAE,KAAKT,MAAL,CAAYU,KAAZ,CAAkBD,IAFrB;QAGHlB,QAAQ,EAAE,EAHP;QAIHuB,SAAS,EAAEL,IAJR;QAKHjB,KAAK,EAAE,EALJ;QAMHC,WAAW,EAAE,EANV;QAOHC,QAAQ,EAAE,EAPP;QAQHC,IAAI,EAAE,EARH;QASHC,IAAI,EAAE,EATH;QAUHmB,SAAS,EAAE;MAVR,CAAP;IAYJ;;EA5BK,CAzBI;EAuDbC,QAAQ,EAAE,EACN,GAAGzC,QAAQ,CAAC,CAAC,YAAD,CAAD;EADL,CAvDG;EA0Db0C,UAAU,EAAE;IACVzC,SADU;IAEVC,UAFU;IAGVC;EAHU;AA1DC,CAAf","names":["NProgress","mapState","BaseInput","BaseSelect","BaseButton","useVuelidate","required","email","setup","v$","data","times","i","push","event","createFreshEventObject","validations","category","title","description","location","date","time","methods","createEvent","start","$store","dispatch","then","$router","name","params","id","catch","done","user","state","Math","floor","random","organizer","attendees","computed","components"],"sourceRoot":"","sources":["/Users/asmitnepali/Documents/projects/personal/real-world-vue/src/views/EventCreate.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Create an Event</h1>\n    <form @submit.prevent=\"createEvent\">\n      <BaseSelect label=\"Select a category\" :options=\"categories\" v-model=\"event.category\" class=\"field\"/>\n\n      <h3>Name & describe your event</h3>\n      <div class=\"field\">\n        <BaseInput type=\"text\" placeholder=\"Title\" label=\"Title\" v-model:value=\"event.title\"/>\n      </div>\n      <div class=\"field\">\n        <BaseInput type=\"text\" placeholder=\"Description\" label=\"Description\" v-model:value=\"event.description\"/>\n      </div>\n\n      <h3>Where is your event?</h3>\n      <div class=\"field\">\n        <BaseInput type=\"text\" placeholder=\"Location\" label=\"Location\" v-model:value=\"event.location\"/>\n      </div>\n\n      <h3>When is your event?</h3>\n\n      <div class=\"field\">\n        <label>Date</label>\n        <input type=\"date\" v-model=\"event.date\" placeholder=\"Select a date\"/>\n      </div>\n\n      <div class=\"field\">\n        <BaseSelect label=\"Select a time\" :options=\"times\" v-model=\"event.time\" class=\"field\"/>\n      </div>\n\n      <!-- <input type=\"submit\" class=\"button -fill-gradient\" value=\"Submit\"/> -->\n      <BaseButton type=\"submit\" buttonClass=\"-fill-gradient\">Submit</BaseButton>\n    </form>\n  </div>\n</template>\n<script>\nimport NProgress from 'nprogress';\nimport { mapState } from 'vuex';\nimport BaseInput from '@/components/BaseInput.vue';\nimport BaseSelect from '@/components/BaseSelect.vue';\nimport BaseButton from '@/components/BaseButton.vue';\nimport { useVuelidate } from '@vuelidate/core'\nimport { required, email } from '@vuelidate/validators'\n\nexport default {\n  setup:()=> ({ v$: useVuelidate}),\n  data() {\n      const times = [];\n      for (let i = 1; i <= 24; i++) {\n          times.push(i + \":00\");\n      }\n      return {\n          times,\n          event: this.createFreshEventObject()\n      };\n  },\n  validations() {\n    return{\n      event: {\n        category: {required},\n        title: {required},\n        description: {required},\n        location: {required},\n        date: {required},\n        time: {required}\n\n      }\n    }\n  },\n  methods: {\n      createEvent() {\n          NProgress.start();\n          this.$store.dispatch(\"event/createEvent\", this.event).then(() => {\n              this.$router.push({\n                  name: \"event-show\",\n                  params: { id: this.event.id }\n              });\n              this.event = this.createFreshEventObject();\n          }).catch(() => {\n              NProgress.done();\n          });\n      },\n      createFreshEventObject() {\n          const user = this.$store.state.user.user;\n          const id = Math.floor(Math.random() * 10000000);\n          return {\n              id: id,\n              user: this.$store.state.user,\n              category: \"\",\n              organizer: user,\n              title: \"\",\n              description: \"\",\n              location: \"\",\n              date: \"\",\n              time: \"\",\n              attendees: []\n          };\n      }\n  },\n  computed: {\n      ...mapState([\"categories\"])\n  },\n  components: {\n    BaseInput,\n    BaseSelect,\n    BaseButton\n}\n}\n</script>\n\n<style scoped>\n.field {\n  margin-bottom: 24px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}