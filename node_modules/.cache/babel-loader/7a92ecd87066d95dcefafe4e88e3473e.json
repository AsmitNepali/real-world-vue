{"ast":null,"code":"import { vModelText as _vModelText, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Submit\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"errorMessage\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"errorMessage\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    placeholder: \"What's your email\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n    class: _normalizeClass({\n      error: _ctx.v$.email.$error\n    }),\n    onBlur: _cache[1] || (_cache[1] = $event => _ctx.v$.email.$touch())\n  }, null, 34\n  /* CLASS, HYDRATE_EVENTS */\n  ), [[_vModelText, $data.email]]), _hoisted_1, _ctx.v$.email.$error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_ctx.v$.email.email.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Please Enter Valid eamil.\")) : _createCommentVNode(\"v-if\", true), _ctx.v$.email.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \"Email is required.\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;gCAMQA,oBAAqC,QAArC,EAAqC;EAA7BC,IAAI,EAAC;AAAwB,CAArC,EAAsB,QAAtB,EAA4B;AAAA;AAA5B;;;;;;;EAEsCC,KAAK,EAAC;;;;EACHA,KAAK,EAAC;;;uBARnDC,oBAUM,KAVN,EAUM,IAVN,EAUM,iBATFH,oBAG0B,OAH1B,EAG0B;IAHnBC,IAAI,EAAC,OAGc;IAHNG,WAAW,EAAC,mBAGN;+DAFjBC,cAAKC,OAEY;IADzBJ,KAAK;MAAAK,OAAUC,QAAGC,KAAH,CAASC;IAAnB,EACoB;IAAzBC,MAAI,sCAAEH,QAAGC,KAAH,CAASG,MAAT,EAAF;EAAqB,CAH1B;;EAAA,kBACSP,cAQP,EALFQ,UAKE,EAJSL,QAAGC,KAAH,CAASC,wBAApBP,oBAGM,KAHN,EAGMW,UAHN,EAGM,CAFON,QAAGC,KAAH,CAASA,KAAT,CAAeM,0BAAxBZ,oBAAoF,GAApF,cAAuD,2BAAvD,sCAEE,EADOK,QAAGC,KAAH,CAASO,QAAT,CAAkBD,0BAA3BZ,oBAAgF,GAAhF,cAA0D,oBAA1D,sCACE,CAHN,sCAIE,CAVN","names":["_createElementVNode","type","class","_createElementBlock","placeholder","$data","$event","error","_ctx","email","$error","onBlur","$touch","_hoisted_1","_hoisted_2","$invalid","required"],"sourceRoot":"","sources":["/Users/asmitnepali/Documents/projects/personal/real-world-vue/src/views/ExampleView.vue"],"sourcesContent":["<template>\n    <div>\n        <input type=\"email\" placeholder=\"What's your email\" \n        v-model=\"email\" \n        :class=\"{error: v$.email.$error}\"\n        @blur=\"v$.email.$touch()\">\n        <button type=\"submit\">Submit</button>\n        <div v-if=\"v$.email.$error\">\n            <p v-if=\"v$.email.email.$invalid\" class=\"errorMessage\">Please Enter Valid eamil.</p>\n            <p v-if=\"v$.email.required.$invalid\" class=\"errorMessage\">Email is required.</p>\n        </div>\n    </div>\n</template>\n<script>\n    import { useVuelidate } from '@vuelidate/core'\n    import { required, email } from '@vuelidate/validators'\n    export default{\n        setup: () => ({ v$: useVuelidate() }),\n        data() {\n            return {\n                email: null,\n                name: null\n            }\n        }, \n        validations() {\n            return {\n                email:{\n                    required,\n                    email\n                },\n                name: {\n                    required\n                }\n\n            }\n        }\n    }\n</script>"]},"metadata":{},"sourceType":"module"}