{"ast":null,"code":"import EventCard from \"@/components/EventCard.vue\";\nimport { mapState } from 'vuex';\nimport store from '@/store';\n\nfunction getPageEvents(routeTo, next) {\n  const currentPage = parseInt(routeTo.query.page) || 1;\n  store.dispatch('event/fetchEvents', {\n    page: currentPage\n  }).then(() => {\n    routeTo.params.page = currentPage;\n    next();\n  });\n}\n\nexport default {\n  props: {\n    page: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    EventCard\n  },\n\n  beforeRouteEnter(routeTo, routeFrom, next) {\n    getPageEvents(routeTo, next);\n  },\n\n  beforeRouteUpdate(roteTo, routeFrom, next) {},\n\n  computed: {\n    isLastPage() {\n      return this.event.ventsTotal > this.page * 3;\n    },\n\n    ...mapState(['user', 'event'])\n  }\n};","map":{"version":3,"mappings":"AAgBA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;EACpC,MAAMC,WAAU,GAAIC,QAAQ,CAACH,OAAO,CAACI,KAAR,CAAcC,IAAf,CAAR,IAAgC,CAApD;EACEP,KAAK,CAACQ,QAAN,CAAe,mBAAf,EAAoC;IAClCD,IAAI,EAAEH;EAD4B,CAApC,EAEGK,IAFH,CAEQ,MAAM;IACZP,OAAO,CAACQ,MAAR,CAAeH,IAAf,GAAsBH,WAAtB;IACAD,IAAI;EACL,CALD;AAMJ;;AACA,eAAe;EACbQ,KAAK,EAAE;IACLJ,IAAI,EAAC;MACHK,IAAI,EAAEC,MADH;MAEHC,QAAQ,EAAE;IAFP;EADA,CADM;EAQbC,UAAU,EAAE;IACVjB;EADU,CARC;;EAYbkB,gBAAgB,CAACd,OAAD,EAAUe,SAAV,EAAqBd,IAArB,EAA2B;IACzCF,aAAa,CAACC,OAAD,EAAUC,IAAV,CAAb;EACD,CAdY;;EAgBbe,iBAAiB,CAACC,MAAD,EAASF,SAAT,EAAoBd,IAApB,EAA0B,CAE1C,CAlBY;;EAqBbiB,QAAQ,EAAE;IACRC,UAAU,GAAG;MACX,OAAO,KAAKC,KAAL,CAAWC,UAAX,GAAwB,KAAKhB,IAAL,GAAU,CAAzC;IACD,CAHO;;IAIR,GAAGR,QAAQ,CAAC,CAAC,MAAD,EAAQ,OAAR,CAAD;EAJH;AArBG,CAAf","names":["EventCard","mapState","store","getPageEvents","routeTo","next","currentPage","parseInt","query","page","dispatch","then","params","props","type","Number","required","components","beforeRouteEnter","routeFrom","beforeRouteUpdate","roteTo","computed","isLastPage","event","ventsTotal"],"sourceRoot":"","sources":["/Users/asmitnepali/Documents/projects/personal/real-world-vue/src/views/EventList.vue"],"sourcesContent":["<template>\n  <div>\n    <h1> Event for {{ user.user.name}} </h1>\n    <EventCard v-for=\"event in event.events\" :key=\"event.id\" :event=\"event\"/>\n    <BaseIcon />\n    <template v-if=\"page != 1\">\n      <router-link :to=\"{name: 'event-list', query:{page: page - 1} }\" rel=\"prev\">Prev Page</router-link>  \n      |\n    </template>\n    <template v-if = \"isLastPage\">\n      <router-link :to=\"{name: 'event-list', query:{page: page + 1} }\" rel=\"prev\">Next Page</router-link>  \n    </template>    \n  </div>\n</template>\n\n<script>\nimport EventCard from \"@/components/EventCard.vue\";\nimport { mapState } from 'vuex';\nimport store from '@/store';\n\nfunction getPageEvents(routeTo, next) {\n  const currentPage = parseInt(routeTo.query.page) || 1\n    store.dispatch('event/fetchEvents', {\n      page: currentPage\n    }).then(() => {\n      routeTo.params.page = currentPage\n      next()\n    })\n} \nexport default {\n  props: {\n    page:{\n      type: Number,\n      required: true\n    }\n\n  },\n  components: {\n    EventCard\n  },\n\n  beforeRouteEnter(routeTo, routeFrom, next) {\n    getPageEvents(routeTo, next)\n  },\n\n  beforeRouteUpdate(roteTo, routeFrom, next) {\n    \n  },\n\n  \n  computed: {\n    isLastPage() {\n      return this.event.ventsTotal > this.page*3\n    },\n    ...mapState(['user','event'])\n  }\n};\n</script>"]},"metadata":{},"sourceType":"module"}