{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Submit\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    placeholder: \"What's your email\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.email]]), _hoisted_1, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.v$.$errors, error => {\n    return _openBlock(), _createElementBlock(\"p\", {\n      key: error.$uid\n    }, _toDisplayString(error.$property) + \" - \" + _toDisplayString(error), 1\n    /* TEXT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;gCAGQA,oBAAqC,QAArC,EAAqC;EAA7BC,IAAI,EAAC;AAAwB,CAArC,EAAsB,QAAtB,EAA4B;AAAA;AAA5B;;;uBAFJC,oBAKM,KALN,EAKM,IALN,EAKM,iBAJFF,oBAAoE,OAApE,EAAoE;IAA7DC,IAAI,EAAC,OAAwD;IAAhDE,WAAW,EAAC,mBAAoC;+DAAPC,cAAKC;EAAE,CAApE;;EAAA,kBAA6DD,cAI3D,EAHFE,UAGE,qBAFFJ,oBACmCK,SADnC,EACmC,IADnC,EACmCC,YADhBC,QAAGC,OACa,EADzBC,KAAmB,IAAd;yBAAfT,oBACmC,GADnC,EACmC;MADHU,GAAG,EAAED,KAAK,CAACE;IACR,CADnC,mBACEF,KAAK,CAACG,aAAW,QAAGC,iBAAEJ,KAAF,CADtB,EAC6B;IAAA;IAD7B;GACmC,CADnC;;EAAA,CAEE,EALN","names":["_createElementVNode","type","_createElementBlock","placeholder","$data","$event","_hoisted_1","_Fragment","_renderList","_ctx","$errors","error","key","$uid","$property","_toDisplayString"],"sourceRoot":"","sources":["/Users/asmitnepali/Documents/projects/personal/real-world-vue/src/views/ExampleView.vue"],"sourcesContent":["<template>\n    <div>\n        <input type=\"email\" placeholder=\"What's your email\" v-model=\"email\">\n        <button type=\"submit\">Submit</button>\n        <p v-for=\"error in v$.$errors\" :key=\"error.$uid\">\n        {{error.$property}} - {{error}}</p>\n    </div>\n</template>\n<script>\n    import { useVuelidate } from '@vuelidate/core'\n    import { required, email } from '@vuelidate/validators'\n    export default{\n        setup: () => ({ v$: useVuelidate() }),\n        data() {\n            return {\n                email: null\n            }\n        }, \n        validations() {\n            return {\n                email:{\n                required,\n                email\n            }}\n        }\n    }\n</script>"]},"metadata":{},"sourceType":"module"}