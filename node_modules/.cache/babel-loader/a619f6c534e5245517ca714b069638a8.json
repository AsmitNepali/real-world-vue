{"ast":null,"code":"import EventService from '@/services/EventService';\nimport { createStore } from 'vuex';\nimport * as user from '@/store/modules/user';\nexport default createStore({\n  state: {\n    categories: ['sustanability', 'nature', 'animal welfare', 'housing', 'education', 'food', 'community'],\n    events: [],\n    eventsTotal: 0,\n    event: {}\n  },\n  getters: {\n    getEventById: state => id => {\n      return state.events.findg(event => event.id === id);\n    }\n  },\n  mutations: {\n    ADD_EVENT(state, event) {\n      state.events.push(event);\n    },\n\n    SET_EVENTS(state, events) {\n      state.events = events;\n    },\n\n    SET_EVENT(state, event) {\n      state.event = event;\n    },\n\n    SET_TOTAL_EVENTS(state, eventsTotal) {\n      state.eventsTotal = eventsTotal;\n    }\n\n  },\n  actions: {\n    createEvent({\n      commit\n    }, event) {\n      return EventService.postEvent(event).then(() => {\n        commit('ADD_EVENT', event);\n      });\n    },\n\n    fetchEvents({\n      commit\n    }, {\n      perPage,\n      page\n    }) {\n      EventService.getEvents(perPage, page).then(response => {\n        commit('SET_TOTAL_EVENTS', parseInt(response.headers['x-total-count']));\n        commit('SET_EVENTS', response.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n\n    fetchEvent({\n      commit,\n      getters\n    }, id) {\n      var event = getters.getEventById(id);\n      console.log(event);\n\n      if (event) {\n        commit('SET_EVENT', event);\n      } else {\n        EventService.getEvent(id).then(response => {\n          commit('SET_EVENT', response.data);\n        }).catch(error => {\n          console.log('There was an error.', error.response);\n        });\n      }\n    }\n\n  },\n  modules: {\n    user\n  }\n});","map":{"version":3,"names":["EventService","createStore","user","state","categories","events","eventsTotal","event","getters","getEventById","id","findg","mutations","ADD_EVENT","push","SET_EVENTS","SET_EVENT","SET_TOTAL_EVENTS","actions","createEvent","commit","postEvent","then","fetchEvents","perPage","page","getEvents","response","parseInt","headers","data","catch","error","console","log","fetchEvent","getEvent","modules"],"sources":["/Users/asmitnepali/Documents/projects/personal/real-world-vue/src/store/index.js"],"sourcesContent":["import EventService from '@/services/EventService'\nimport { createStore } from 'vuex'\nimport * as user from '@/store/modules/user'\n\nexport default createStore({\n  state: {\n    categories:[\n      'sustanability',\n      'nature',\n      'animal welfare',\n      'housing',\n      'education',\n      'food',\n      'community'\n    ],\n    events: [],\n    eventsTotal:0,\n    event:{}\n  },\n\n  getters: {\n    getEventById: state => id => {\n      return state.events.findg(event => event.id === id)\n    },\n    \n  },\n\n  mutations: {\n    ADD_EVENT (state,event){\n      state.events.push(event)\n    },\n    SET_EVENTS(state, events) {\n      state.events  = events\n    },\n    SET_EVENT(state,event){\n      state.event = event\n    },\n    SET_TOTAL_EVENTS(state,eventsTotal) {\n      state.eventsTotal = eventsTotal\n    }\n  },\n\n  actions: {\n    createEvent({commit}, event) {\n      return EventService.postEvent(event).then(()=>{\n      commit('ADD_EVENT', event)\n      })\n    }, \n\n    fetchEvents({commit} ,{perPage, page}) {\n      EventService.getEvents(perPage, page)\n      .then(response => {\n        commit('SET_TOTAL_EVENTS', parseInt(response.headers['x-total-count']))\n        commit('SET_EVENTS', response.data)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n    },\n\n    fetchEvent({commit, getters}, id) {\n      var event = getters.getEventById(id)\n      console.log(event)\n      if(event) {\n        commit('SET_EVENT', event)\n      }\n      else {\n      EventService.getEvent(id)\n      .then(response => {\n        commit('SET_EVENT', response.data)\n      })\n      .catch(error => {\n        console.log('There was an error.', error.response);\n      })\n    }\n    }\n  }, \n  modules: {\n    user\n  }\n})\n"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,SAASC,WAAT,QAA4B,MAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,sBAAtB;AAEA,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACLC,UAAU,EAAC,CACT,eADS,EAET,QAFS,EAGT,gBAHS,EAIT,SAJS,EAKT,WALS,EAMT,MANS,EAOT,WAPS,CADN;IAULC,MAAM,EAAE,EAVH;IAWLC,WAAW,EAAC,CAXP;IAYLC,KAAK,EAAC;EAZD,CADkB;EAgBzBC,OAAO,EAAE;IACPC,YAAY,EAAEN,KAAK,IAAIO,EAAE,IAAI;MAC3B,OAAOP,KAAK,CAACE,MAAN,CAAaM,KAAb,CAAmBJ,KAAK,IAAIA,KAAK,CAACG,EAAN,KAAaA,EAAzC,CAAP;IACD;EAHM,CAhBgB;EAuBzBE,SAAS,EAAE;IACTC,SAAS,CAAEV,KAAF,EAAQI,KAAR,EAAc;MACrBJ,KAAK,CAACE,MAAN,CAAaS,IAAb,CAAkBP,KAAlB;IACD,CAHQ;;IAITQ,UAAU,CAACZ,KAAD,EAAQE,MAAR,EAAgB;MACxBF,KAAK,CAACE,MAAN,GAAgBA,MAAhB;IACD,CANQ;;IAOTW,SAAS,CAACb,KAAD,EAAOI,KAAP,EAAa;MACpBJ,KAAK,CAACI,KAAN,GAAcA,KAAd;IACD,CATQ;;IAUTU,gBAAgB,CAACd,KAAD,EAAOG,WAAP,EAAoB;MAClCH,KAAK,CAACG,WAAN,GAAoBA,WAApB;IACD;;EAZQ,CAvBc;EAsCzBY,OAAO,EAAE;IACPC,WAAW,CAAC;MAACC;IAAD,CAAD,EAAWb,KAAX,EAAkB;MAC3B,OAAOP,YAAY,CAACqB,SAAb,CAAuBd,KAAvB,EAA8Be,IAA9B,CAAmC,MAAI;QAC9CF,MAAM,CAAC,WAAD,EAAcb,KAAd,CAAN;MACC,CAFM,CAAP;IAGD,CALM;;IAOPgB,WAAW,CAAC;MAACH;IAAD,CAAD,EAAW;MAACI,OAAD;MAAUC;IAAV,CAAX,EAA4B;MACrCzB,YAAY,CAAC0B,SAAb,CAAuBF,OAAvB,EAAgCC,IAAhC,EACCH,IADD,CACMK,QAAQ,IAAI;QAChBP,MAAM,CAAC,kBAAD,EAAqBQ,QAAQ,CAACD,QAAQ,CAACE,OAAT,CAAiB,eAAjB,CAAD,CAA7B,CAAN;QACAT,MAAM,CAAC,YAAD,EAAeO,QAAQ,CAACG,IAAxB,CAAN;MACD,CAJD,EAKCC,KALD,CAKOC,KAAK,IAAI;QACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACD,CAPD;IAQD,CAhBM;;IAkBPG,UAAU,CAAC;MAACf,MAAD;MAASZ;IAAT,CAAD,EAAoBE,EAApB,EAAwB;MAChC,IAAIH,KAAK,GAAGC,OAAO,CAACC,YAAR,CAAqBC,EAArB,CAAZ;MACAuB,OAAO,CAACC,GAAR,CAAY3B,KAAZ;;MACA,IAAGA,KAAH,EAAU;QACRa,MAAM,CAAC,WAAD,EAAcb,KAAd,CAAN;MACD,CAFD,MAGK;QACLP,YAAY,CAACoC,QAAb,CAAsB1B,EAAtB,EACCY,IADD,CACMK,QAAQ,IAAI;UAChBP,MAAM,CAAC,WAAD,EAAcO,QAAQ,CAACG,IAAvB,CAAN;QACD,CAHD,EAICC,KAJD,CAIOC,KAAK,IAAI;UACdC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACL,QAAzC;QACD,CAND;MAOD;IACA;;EAjCM,CAtCgB;EAyEzBU,OAAO,EAAE;IACPnC;EADO;AAzEgB,CAAD,CAA1B"},"metadata":{},"sourceType":"module"}