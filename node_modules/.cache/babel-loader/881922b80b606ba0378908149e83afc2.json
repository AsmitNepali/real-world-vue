{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Submit\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    placeholder: \"What's your email\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n    onBlur: _cache[1] || (_cache[1] = $event => _ctx.v$.email.$touch())\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.email]]), _hoisted_1, _ctx.v$.email.$error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_ctx.v$.email.email.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Please Enter Valid eamil.\")) : _createCommentVNode(\"v-if\", true), _ctx.v$.email.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \"Email is required.\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;gCAGQA,oBAAqC,QAArC,EAAqC;EAA7BC,IAAI,EAAC;AAAwB,CAArC,EAAsB,QAAtB,EAA4B;AAAA;AAA5B;;;;;;;;;;;;uBAFJC,oBAOU,KAPV,EAOU,IAPV,EAOU,iBANNF,oBAA8F,OAA9F,EAA8F;IAAvFC,IAAI,EAAC,OAAkF;IAA1EE,WAAW,EAAC,mBAA8D;+DAAjCC,cAAKC,OAA4B;IAAzBC,MAAI,sCAAEC,QAAGC,KAAH,CAASC,MAAT,EAAF;EAAqB,CAA9F;;EAAA,kBAA6DL,cAMvD,EALNM,UAKM,EAJKH,QAAGC,KAAH,CAASG,wBAApBT,oBAGM,KAHN,EAGMU,UAHN,EAGM,CAFOL,QAAGC,KAAH,CAASA,KAAT,CAAeK,0BAAxBX,oBAA+D,GAA/D,EAA+DY,UAA/D,EAAkC,2BAAlC,sCAEE,EADOP,QAAGC,KAAH,CAASO,QAAT,CAAkBF,0BAA3BX,oBAA2D,GAA3D,EAA2Dc,UAA3D,EAAqC,oBAArC,sCACE,CAHN,sCAIM,CAPV","names":["_createElementVNode","type","_createElementBlock","placeholder","$data","$event","onBlur","_ctx","email","$touch","_hoisted_1","$error","_hoisted_2","$invalid","_hoisted_3","required","_hoisted_4"],"sourceRoot":"","sources":["/Users/asmitnepali/Documents/projects/personal/real-world-vue/src/views/ExampleView.vue"],"sourcesContent":["<template>\n    <div>\n        <input type=\"email\" placeholder=\"What's your email\" v-model=\"email\" @blur=\"v$.email.$touch()\">\n        <button type=\"submit\">Submit</button>\n        <div v-if=\"v$.email.$error\">\n            <p v-if=\"v$.email.email.$invalid\">Please Enter Valid eamil.</p>\n            <p v-if=\"v$.email.required.$invalid\">Email is required.</p>\n        </div>\n        </div>\n</template>\n<script>\n    import { useVuelidate } from '@vuelidate/core'\n    import { required, email } from '@vuelidate/validators'\n    export default{\n        setup: () => ({ v$: useVuelidate() }),\n        data() {\n            return {\n                email: null,\n                name: null\n            }\n        }, \n        validations() {\n            return {\n                email:{\n                    required,\n                    email\n                },\n                name: {\n                    required\n                }\n\n            }\n        }\n    }\n</script>"]},"metadata":{},"sourceType":"module"}