{"ast":null,"code":"import EventCard from \"@/components/EventCard.vue\";\nimport { mapState } from 'vuex';\nimport store from '@/store';\nexport default {\n  props: {\n    page: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    EventCard\n  },\n\n  beforeRouteUpdate(roteTo, routeFrom, next) {},\n\n  beforeRouteEnter(routeTo, routeFrom, next) {\n    const currentPage = parseInt(routeTo.query.page) || 1;\n    store.dispatch('event/fetchEvents', {\n      page: currentPage\n    }).then(() => {\n      routeTo.params.page = currentPage;\n      next();\n    });\n  },\n\n  computed: {\n    isLastPage() {\n      return this.event.ventsTotal > this.page * 3;\n    },\n\n    ...mapState(['user', 'event'])\n  }\n};","map":{"version":3,"mappings":"AAgBA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,eAAe;EACbC,KAAK,EAAE;IACLC,IAAI,EAAC;MACHC,IAAI,EAAEC,MADH;MAEHC,QAAQ,EAAE;IAFP;EADA,CADM;EAQbC,UAAU,EAAE;IACVR;EADU,CARC;;EAYbS,iBAAiB,CAACC,MAAD,EAASC,SAAT,EAAoBC,IAApB,EAA0B,CAE1C,CAdY;;EAgBbC,gBAAgB,CAACC,OAAD,EAAUH,SAAV,EAAqBC,IAArB,EAA2B;IACzC,MAAMG,WAAU,GAAIC,QAAQ,CAACF,OAAO,CAACG,KAAR,CAAcb,IAAf,CAAR,IAAgC,CAApD;IACAF,KAAK,CAACgB,QAAN,CAAe,mBAAf,EAAoC;MAClCd,IAAI,EAAEW;IAD4B,CAApC,EAEGI,IAFH,CAEQ,MAAM;MACZL,OAAO,CAACM,MAAR,CAAehB,IAAf,GAAsBW,WAAtB;MACAH,IAAI;IACL,CALD;EAOD,CAzBY;;EA0BbS,QAAQ,EAAE;IACRC,UAAU,GAAG;MACX,OAAO,KAAKC,KAAL,CAAWC,UAAX,GAAwB,KAAKpB,IAAL,GAAU,CAAzC;IACD,CAHO;;IAIR,GAAGH,QAAQ,CAAC,CAAC,MAAD,EAAQ,OAAR,CAAD;EAJH;AA1BG,CAAf","names":["EventCard","mapState","store","props","page","type","Number","required","components","beforeRouteUpdate","roteTo","routeFrom","next","beforeRouteEnter","routeTo","currentPage","parseInt","query","dispatch","then","params","computed","isLastPage","event","ventsTotal"],"sourceRoot":"","sources":["/Users/asmitnepali/Documents/projects/personal/real-world-vue/src/views/EventList.vue"],"sourcesContent":["<template>\n  <div>\n    <h1> Event for {{ user.user.name}} </h1>\n    <EventCard v-for=\"event in event.events\" :key=\"event.id\" :event=\"event\"/>\n    <BaseIcon />\n    <template v-if=\"page != 1\">\n      <router-link :to=\"{name: 'event-list', query:{page: page - 1} }\" rel=\"prev\">Prev Page</router-link>  \n      |\n    </template>\n    <template v-if = \"isLastPage\">\n      <router-link :to=\"{name: 'event-list', query:{page: page + 1} }\" rel=\"prev\">Next Page</router-link>  \n    </template>    \n  </div>\n</template>\n\n<script>\nimport EventCard from \"@/components/EventCard.vue\";\nimport { mapState } from 'vuex';\nimport store from '@/store';\n\nexport default {\n  props: {\n    page:{\n      type: Number,\n      required: true\n    }\n\n  },\n  components: {\n    EventCard\n  },\n\n  beforeRouteUpdate(roteTo, routeFrom, next) {\n\n  },\n\n  beforeRouteEnter(routeTo, routeFrom, next) {\n    const currentPage = parseInt(routeTo.query.page) || 1\n    store.dispatch('event/fetchEvents', {\n      page: currentPage\n    }).then(() => {\n      routeTo.params.page = currentPage\n      next()\n    })\n\n  },\n  computed: {\n    isLastPage() {\n      return this.event.ventsTotal > this.page*3\n    },\n    ...mapState(['user','event'])\n  }\n};\n</script>"]},"metadata":{},"sourceType":"module"}