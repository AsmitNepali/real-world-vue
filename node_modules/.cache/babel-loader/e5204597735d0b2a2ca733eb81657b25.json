{"ast":null,"code":"import EventService from \"@/services/EventService\";\nexport const namespaced = true;\nexport const state = {\n  events: [],\n  eventsTotal: 0,\n  event: {}\n};\nexport const getters = {\n  getEventById: state => id => {\n    return state.events.find(event => event.id === id);\n  }\n};\nexport const mutations = {\n  ADD_EVENT(state, event) {\n    state.events.push(event);\n  },\n\n  SET_EVENTS(state, events) {\n    state.events = events;\n  },\n\n  SET_EVENT(state, event) {\n    state.event = event;\n  },\n\n  SET_TOTAL_EVENTS(state, eventsTotal) {\n    state.eventsTotal = eventsTotal;\n  }\n\n};\nexport const actions = {\n  createEvent({\n    commit\n  }, event) {\n    return EventService.postEvent(event).then(() => {\n      commit('ADD_EVENT', event);\n    });\n  },\n\n  fetchEvents({\n    commit,\n    dispatch\n  }, {\n    perPage,\n    page\n  }) {\n    EventService.getEvents(perPage, page).then(response => {\n      commit('SET_TOTAL_EVENTS', parseInt(response.headers['x-total-count']));\n      commit('SET_EVENTS', response.data);\n    }).catch(error => {\n      const notification = {\n        type: 'error',\n        message: 'There was a problem fetching events:' + error.message\n      };\n      dispatch('notification/add', notification, {\n        root: true\n      });\n    });\n  },\n\n  fetchEvent({\n    commit,\n    getters,\n    dispatch\n  }, id) {\n    var event = getters.getEventById(id);\n\n    if (event) {\n      commit('SET_EVENT', event);\n    } else {\n      EventService.getEvent(id).then(response => {\n        commit('SET_EVENT', response.data);\n      }).catch(error => {\n        console.log('There was an error.', error.response);\n      });\n    }\n  }\n\n};","map":{"version":3,"names":["EventService","namespaced","state","events","eventsTotal","event","getters","getEventById","id","find","mutations","ADD_EVENT","push","SET_EVENTS","SET_EVENT","SET_TOTAL_EVENTS","actions","createEvent","commit","postEvent","then","fetchEvents","dispatch","perPage","page","getEvents","response","parseInt","headers","data","catch","error","notification","type","message","root","fetchEvent","getEvent","console","log"],"sources":["/Users/asmitnepali/Documents/projects/personal/real-world-vue/src/store/modules/event.js"],"sourcesContent":["import EventService from \"@/services/EventService\"\n\nexport const namespaced = true\n\n  export const state= {\n    events: [],\n    eventsTotal:0,\n    event:{}\n  }\n\n  export const getters= {\n    getEventById: state => id => {\n      return state.events.find(event => event.id === id)\n    },\n    \n  }\n\n  export const mutations= {\n    ADD_EVENT (state,event){\n      state.events.push(event)\n    },\n    SET_EVENTS(state, events) {\n      state.events  = events\n    },\n    SET_EVENT(state,event){\n      state.event = event\n    },\n    SET_TOTAL_EVENTS(state,eventsTotal) {\n      state.eventsTotal = eventsTotal\n    }\n  }\n\n  export const actions= {\n    createEvent({commit}, event) {\n      return EventService.postEvent(event).then(()=>{\n      commit('ADD_EVENT', event)\n      })\n    }, \n\n    fetchEvents({commit, dispatch} ,{perPage, page}) {\n      EventService.getEvents(perPage, page)\n      .then(response => {\n        commit('SET_TOTAL_EVENTS', parseInt(response.headers['x-total-count']))\n        commit('SET_EVENTS', response.data)\n      })\n      .catch(error => {\n        const notification  = {\n            type: 'error',\n            message: 'There was a problem fetching events:' + error.message\n        }\n        dispatch('notification/add', notification, {root:true})\n      })\n    },\n\n    fetchEvent({commit, getters, dispatch}, id) {\n      var event = getters.getEventById(id)\n      if(event) {\n        commit('SET_EVENT', event)\n      }\n      else {\n      EventService.getEvent(id)\n      .then(response => {\n        commit('SET_EVENT', response.data)\n      })\n      .catch(error => {\n        console.log('There was an error.', error.response);\n      })\n    }\n    }\n  }\n"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AAEA,OAAO,MAAMC,UAAU,GAAG,IAAnB;AAEL,OAAO,MAAMC,KAAK,GAAE;EAClBC,MAAM,EAAE,EADU;EAElBC,WAAW,EAAC,CAFM;EAGlBC,KAAK,EAAC;AAHY,CAAb;AAMP,OAAO,MAAMC,OAAO,GAAE;EACpBC,YAAY,EAAEL,KAAK,IAAIM,EAAE,IAAI;IAC3B,OAAON,KAAK,CAACC,MAAN,CAAaM,IAAb,CAAkBJ,KAAK,IAAIA,KAAK,CAACG,EAAN,KAAaA,EAAxC,CAAP;EACD;AAHmB,CAAf;AAOP,OAAO,MAAME,SAAS,GAAE;EACtBC,SAAS,CAAET,KAAF,EAAQG,KAAR,EAAc;IACrBH,KAAK,CAACC,MAAN,CAAaS,IAAb,CAAkBP,KAAlB;EACD,CAHqB;;EAItBQ,UAAU,CAACX,KAAD,EAAQC,MAAR,EAAgB;IACxBD,KAAK,CAACC,MAAN,GAAgBA,MAAhB;EACD,CANqB;;EAOtBW,SAAS,CAACZ,KAAD,EAAOG,KAAP,EAAa;IACpBH,KAAK,CAACG,KAAN,GAAcA,KAAd;EACD,CATqB;;EAUtBU,gBAAgB,CAACb,KAAD,EAAOE,WAAP,EAAoB;IAClCF,KAAK,CAACE,WAAN,GAAoBA,WAApB;EACD;;AAZqB,CAAjB;AAeP,OAAO,MAAMY,OAAO,GAAE;EACpBC,WAAW,CAAC;IAACC;EAAD,CAAD,EAAWb,KAAX,EAAkB;IAC3B,OAAOL,YAAY,CAACmB,SAAb,CAAuBd,KAAvB,EAA8Be,IAA9B,CAAmC,MAAI;MAC9CF,MAAM,CAAC,WAAD,EAAcb,KAAd,CAAN;IACC,CAFM,CAAP;EAGD,CALmB;;EAOpBgB,WAAW,CAAC;IAACH,MAAD;IAASI;EAAT,CAAD,EAAqB;IAACC,OAAD;IAAUC;EAAV,CAArB,EAAsC;IAC/CxB,YAAY,CAACyB,SAAb,CAAuBF,OAAvB,EAAgCC,IAAhC,EACCJ,IADD,CACMM,QAAQ,IAAI;MAChBR,MAAM,CAAC,kBAAD,EAAqBS,QAAQ,CAACD,QAAQ,CAACE,OAAT,CAAiB,eAAjB,CAAD,CAA7B,CAAN;MACAV,MAAM,CAAC,YAAD,EAAeQ,QAAQ,CAACG,IAAxB,CAAN;IACD,CAJD,EAKCC,KALD,CAKOC,KAAK,IAAI;MACd,MAAMC,YAAY,GAAI;QAClBC,IAAI,EAAE,OADY;QAElBC,OAAO,EAAE,yCAAyCH,KAAK,CAACG;MAFtC,CAAtB;MAIAZ,QAAQ,CAAC,kBAAD,EAAqBU,YAArB,EAAmC;QAACG,IAAI,EAAC;MAAN,CAAnC,CAAR;IACD,CAXD;EAYD,CApBmB;;EAsBpBC,UAAU,CAAC;IAAClB,MAAD;IAASZ,OAAT;IAAkBgB;EAAlB,CAAD,EAA8Bd,EAA9B,EAAkC;IAC1C,IAAIH,KAAK,GAAGC,OAAO,CAACC,YAAR,CAAqBC,EAArB,CAAZ;;IACA,IAAGH,KAAH,EAAU;MACRa,MAAM,CAAC,WAAD,EAAcb,KAAd,CAAN;IACD,CAFD,MAGK;MACLL,YAAY,CAACqC,QAAb,CAAsB7B,EAAtB,EACCY,IADD,CACMM,QAAQ,IAAI;QAChBR,MAAM,CAAC,WAAD,EAAcQ,QAAQ,CAACG,IAAvB,CAAN;MACD,CAHD,EAICC,KAJD,CAIOC,KAAK,IAAI;QACdO,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCR,KAAK,CAACL,QAAzC;MACD,CAND;IAOD;EACA;;AApCmB,CAAf"},"metadata":{},"sourceType":"module"}